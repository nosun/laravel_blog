{"version":3,"names":[],"mappings":"","sources":["common.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Mavigator = function () {\n    function Mavigator() {\n        var selector = arguments.length <= 0 || arguments[0] === undefined ? 'html' : arguments[0];\n        var options = arguments[1];\n\n        _classCallCheck(this, Mavigator);\n\n        this.selector = selector;\n        this.options = this.mergeOptions(Mavigator.defaults(), options);\n    }\n\n    _createClass(Mavigator, [{\n        key: 'mergeOptions',\n        value: function mergeOptions(source, override) {\n            for (var key in override) {\n                if (source.hasOwnProperty(key)) {\n                    source[key] = override[key];\n                }\n            }\n\n            return source;\n        }\n    }, {\n        key: 'init',\n        value: function init() {\n            var nodes = this.getNodesToMark();\n\n            if (!nodes || !nodes.length) {\n                if (this.options.warn) {\n                    console.warn('No link to mark was found for the given URI [' + this.options.uri + ']');\n                }\n                return;\n            }\n\n            for (var i = 0; i < nodes.length; i++) {\n                var realNode = this.options.classToParent ? nodes[i].parentNode : nodes[i];\n\n                this.addClassTo(realNode);\n            }\n        }\n    }, {\n        key: 'getNodesToMark',\n        value: function getNodesToMark() {\n            var nodes = [];\n            var sets = this.sets();\n\n            if (!sets.length) return;\n\n            for (var i = 0; i < sets.length; i++) {\n                nodes = nodes.concat(this.getMarkableNodesFrom(sets[i]));\n            }\n\n            return nodes;\n        }\n    }, {\n        key: 'sets',\n        value: function sets() {\n            this.validateSelector();\n\n            return document.querySelectorAll(this.selector);\n        }\n    }, {\n        key: 'validateSelector',\n        value: function validateSelector() {\n            if (!this.selector.length) {\n                throw new TypeError('The provided selector is empty.');\n            }\n\n            if (_typeof(this.selector) === 'object') {\n                throw new TypeError('A selector must be a string.');\n            }\n        }\n    }, {\n        key: 'getMarkableNodesFrom',\n        value: function getMarkableNodesFrom(set) {\n            var _this = this;\n\n            var selector = 'a';\n            var links = set.querySelectorAll(selector);\n            links = [].slice.call(links);\n\n            return links.filter(function (link) {\n                return link.pathname === _this.options.uri;\n            });\n        }\n    }, {\n        key: 'addClassTo',\n        value: function addClassTo(node) {\n            if (node.classList) {\n                node.classList.add(this.options.className);\n            } else {\n                node.className += ' ' + className;\n            }\n        }\n    }], [{\n        key: 'mark',\n        value: function mark(selector, options) {\n            new Mavigator(selector, options).init();\n        }\n    }, {\n        key: 'defaults',\n        value: function defaults() {\n            return {\n                className: 'active',\n                classToParent: false,\n                uri: window.location.pathname,\n                warn: false\n            };\n        }\n    }]);\n\n    return Mavigator;\n}();\n\nexports.default = Mavigator;\n},{}],2:[function(require,module,exports){\n'use strict';\n\nvar _mavigator = require('mavigator');\n\nvar _mavigator2 = _interopRequireDefault(_mavigator);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_mavigator2.default.mark('body', { warn: true });\n\n},{\"mavigator\":1}]},{},[2]);\n"],"file":"common.js","sourceRoot":"/source/"}